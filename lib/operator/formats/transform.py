__all__ = ['pdb2xyz', 'pdb2lammpsdata', 'lammpstrj2lammpsdata', 'npy2poscar', 'poscar2xyz', 
           'qelog2npy','xyz2npy', 'xyz2lammpstrj', 'lammpstrj2xyz', 'xsd2pdb', 'lammpstrj2lammpstrj']



from ...check import check_module, check_func


def pdb2xyz(**kwargs):
    '''
    通用函数，用于将pdb格式文件转换为xyz格式文件。

    参数：
        dir_init - 初始目录路径
        dir_target - 目标目录路径

    返回：
        返回记录值
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")
    param = kwargs.get("Arch.lib").get("operator").get("formats").get("pdb2xyz")
    names = param.get("names", ['O', 'H'])

    mda = check_module('MDAnalysis')
    os = check_module('os')

    u = mda.Universe(os.path.join(dir_init, 'system.pdb'))
    atoms = u.select_atoms("name " + names[0])
    for name in names[1:]:
        atoms += u.select_atoms("name "+name)

    with open(os.path.join(dir_target, "system.xyz"), 'w') as file_xyz:
        file_xyz.write("%d\nframe 0\n" % atoms.n_atoms)
        for atom in atoms:
            file_xyz.write(atom.name + '\t%14.8f\t%14.8f\t%14.8f\n' 
                   % (atom.position[0], atom.position[1], atom.position[2]))

    print("The XYZ file has been generated at %s" % os.path.join(dir_target, "system.xyz"))

def pdb2lammpsdata(**kwargs):
    '''
    通用函数，用于将pdb格式文件转换为lammpsdata格式文件。

    参数：
        dir_init - 初始目录路径
        dir_target - 目标目录路径

    返回：
        返回记录值
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")
    param = kwargs.get("Arch.lib").get("operator").get("formats").get("pdb2lammpsdata")
    names = param.get("names", ["O", "H"])
    masses = param.get("masses", [15.999000, 1.008000])

    mda = check_module('MDAnalysis')
    os = check_module('os')

    u = mda.Universe(os.path.join(dir_init, 'system.pdb'))

    for index, name in enumerate(names):
        atoms = u.select_atoms("name " + name)
        atoms.masses = masses[index]
        atoms.types = str(index + 1)

    allatoms = u.select_atoms('all')

    with open(os.path.join(dir_target, "system.data"), 'w') as data:
        data.write("LAMMPS data file. dpmdlmp style. atom_style atomic generated by Arch.pdb2lammpsdata\n %d atoms\n" % allatoms.n_atoms + 
                   " %d atom types\n" % len(names))
        data.write(" %.8f %.8f  xlo xhi\n" % (0.0, u.dimensions[0]) + 
                   " %.8f %.8f  ylo yhi\n" % (0.0, u.dimensions[1]) +
                   " %.8f %.8f  zlo zhi\n" % (0.0, u.dimensions[2]) +
                   " %.2f %.2f %.2f  xy xz yz\n\n" % (0, 0, 0))
        data.write(" Masses\n\n")
        for name in names:
            atoms = u.select_atoms("name " + name)
            data.write(" %s %10.8f\n" %(atoms.types[0], atoms.masses[0]))
        data.write("\n Atoms # atomic\n\n")
        for index, atom in enumerate(allatoms):
            data.write("%d\t%d\t" % (index+1, int(atom.type)) +
                       "%14.8f\t%14.8f\t%14.8f\n" % (atom.position[0], atom.position[1], atom.position[2]))

    print("The LAMMPSdata file has been generated at %s" % os.path.join(dir_target, "system.data"))

def lammpstrj2lammpsdata(**kwargs):
    '''
    通用函数，用于将lammpstrj格式文件转换为lammpsdata格式文件。

    参数：
        dir_init - 初始目录路径
        dir_target - 目标目录路径

    返回：
        返回记录值
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")

    mda = check_module('MDAnalysis')
    os = check_module('os')

    u = mda.Universe(os.path.join(dir_init, 'traj.lammpstrj'), format='LAMMPSDUMP')
    atoms = u.select_atoms('all')
    with open(os.path.join(dir_target, "system.data"), 'w') as data:
        data.write("LAMMPS data file. dpmdlmp style. atom_style atomic generated by Arch.lammpstrj2lammpsdata\n %d atoms\n" % atoms.n_atoms + 
                   " %d atom types\n" % len(set(atoms.types)))
        data.write(" %.8f %.8f  xlo xhi\n" % (0.0, u.dimensions[0]) + 
                   " %.8f %.8f  ylo yhi\n" % (0.0, u.dimensions[1]) +
                   " %.8f %.8f  zlo zhi\n" % (0.0, u.dimensions[2]) +
                   " %.2f %.2f %.2f  xy xz yz\n\n" % (0, 0, 0))
        data.write(" Atoms # atomic\n\n")
        for index, atom in enumerate(atoms):
            data.write("%d\t%d\t" % (index+1, int(atom.type)) +
                       "%14.8f\t%14.8f\t%14.8f\n" % (atom.position[0], atom.position[1], atom.position[2]))

    print("The LAMMPSdata file has been generated at %s" % os.path.join(dir_target, "system.data"))


def npy2poscar(**kwargs):
    '''
    通用函数，用于将npy格式文件转换为POSCAR格式文件。

    参数：
        dir_init - 初始目录路径
        dir_target - 目标目录路径

    返回：
        返回记录值
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")
    if len(kwargs) > 2:
        param = kwargs
    else:
        param = kwargs.get("Arch.lib").get("operator").get("formats").get("npy2poscar")
    multi = param.get("multi", False)
    record = param.get("record", 0)

    os = check_module('os')
    dp = check_module('dpdata')

    dir_poscar = os.path.join(dir_target, 'VASP_poscar')
    try:
        if multi:
            frames = dp.LabeledSystem(file_name=dir_init, fmt='deepmd/npy')
            if not os.path.exists(dir_poscar):
                os.makedirs(dir_poscar)
        else:
            frames = dp.LabeledSystem(file_name=os.path.join(dir_init, 'dpnpy'), fmt='deepmd/npy')
            os.makedirs(dir_poscar)
    except FileExistsError as e:
        import sys  
        sys.exit(e)
    else:
        for index in range(len(frames)):
            frames[index].to("vasp/poscar", os.path.join(dir_poscar, str(index+record).zfill(2)+'.poscar'))
        record += len(frames)
        
        print("The POSCAR file has been generated at %s" % dir_poscar)
        return record


def poscar2xyz(**kwargs):
    '''
    通用函数，用于将POSCAR格式文件转换为xyz格式文件。

    dir_init：初始目录路径
    dir_target：目标目录路径
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")

    os = check_module('os')
    read = check_func('ase.io', 'read')
    write = check_func('ase.io', 'write')

    dir_poscar = os.path.join(dir_init, 'VASP_poscar')
    dir_xyz = os.path.join(dir_target, 'QE_xyz')
    list_filenames = os.listdir(dir_poscar)
    try:
        os.makedirs(dir_xyz)
    except FileExistsError as e:
        import sys 
        sys.exit(e)
    else:
        for filename in list_filenames:
            file_poscar = os.path.join(dir_poscar, filename)
            frame = read(file_poscar, format='vasp')
            # 将Atoms对象保存为Quantum ESPRESSO的坐标文件
            espresso_coord_file = os.path.join(dir_xyz, filename+'.xyz')  
            write(espresso_coord_file, frame, format='xyz')

        print("The XYZ file has been generated at %s" % dir_xyz)
def qelog2npy(**kwargs):
    '''
    通用函数，用于将xyz格式文件转换为npy格式文件。

    dir_init：初始目录路径
    dir_target：目标目录路径
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")

    os, dp, np = check_module('os'), check_module('dpdata'), check_module('numpy')
    read, Counter = check_func('ase.io', 'read'), check_func('collections', 'Counter')

    dir_npy = os.path.join(dir_target, 'dpnpy')

    try:
        frames = read(os.path.join(dir_init, 'bo.log'), index=slice(None), format='espresso-out')
    except FileExistsError as e:
        import sys 
        sys.exit(e)
    else:
        nframes, natoms = len(frames), len(frames[0])

        system = dp.LabeledSystem()
        list_atom_names = frames[0].get_chemical_symbols()
        system.data['atom_names'] = sorted(set(list_atom_names), key=list_atom_names.index)
        system.data['atom_numbs'] = [Counter(list_atom_names)[element] for element in system.data['atom_names']]
        mapper = {k: v for v, k in enumerate(system.data['atom_names'])}
        system.data['atom_types'] = np.array([mapper[element] for element in list_atom_names])
        system.data['cells'] = np.zeros((nframes, 3, 3))
        system.data['coords'] = np.zeros((nframes, natoms, 3))
        system.data['energies'] = np.zeros((nframes))
        system.data['forces'] = np.zeros((nframes, natoms, 3))
        system.data['virials'] = np.zeros((nframes, 3, 3))

        for i in range(nframes):
            system.data['cells'][i, :, :] = frames[i].cell[:]
            system.data['coords'][i, :, :] = frames[i].positions
            system.data['energies'][i] = frames[i].get_total_energy()
            system.data['forces'][i, :, :] = frames[i].get_forces()
            system.data['virials'][i, :, :] = frames[i].get_stress(voigt=False)*(-1)*np.linalg.det(frames[i].cell)
        system.to("deepmd/npy", dir_npy)
        print("The deepmd/npy file has been generated at %s" % dir_npy)

def xyz2npy(**kwargs):
    '''
    通用函数，用于将xyz格式文件转换为npy格式文件。

    dir_init：初始目录路径
    dir_target：目标目录路径
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")
    param = kwargs.get("Arch.lib").get("operator").get("formats").get("xyz2npy")
    multi = param.get("multi", False)
    record = param.get("record", 0)

    os = check_module('os')
    dp = check_module('dpdata')

    dir_npy = os.path.join(dir_target, 'dpnpy')
    try:
        if multi:
            frames = dp.LabeledSystem(file_name=dir_init, fmt='qe/cp/traj')
            if not os.path.exists(dir_npy):
                os.makedirs(dir_npy)
            dir_npy_index = os.makedirs(os.path.join(dir_npy, str(record)))
            record += 1
            frames.to("deepmd/npy", dir_npy_index)
        else:
            frames = dp.LabeledSystem(file_name=os.path.join(dir_init, 'QE_pos', 'cp'), fmt='qe/cp/traj')
            os.makedirs(dir_npy)
            frames.to("deepmd/npy", dir_npy)
    except FileExistsError as e:
        import sys 
        sys.exit(e)
    else:
        print("The deepmd/npy file has been generated at %s" % dir_npy)

        return record

def xsd2pdb(**kwargs):
    '''
    通用函数，用于将xsd格式文件转换为pdb格式文件。

    dir_init：初始目录路径
    dir_target：目标目录路径
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")
    param = kwargs.get("Arch.lib").get("operator").get("formats").get("xsd2pdb")
    filename = param.get("filename", "system.pdb")

    os = check_module('os')
    read = check_func('ase.io', 'read')
    write = check_func('ase.io', 'write')

    file_xsd = os.path.join(dir_init, filename)
    file_pdb = os.path.join(dir_target, 'system.pdb')
    frame = read(file_xsd, format='xsd') 
    write(file_pdb, frame, format='proteindatabank')

    print("The PDB file has been generated at %s" % file_pdb)

def xyz2lammpstrj(**kwargs):
    '''
    通用函数，用于将xyz格式文件转换为lammpstrj格式文件。

    dir_init：初始目录路径
    dir_target：目标目录路径
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")

    os = check_module('os')
    dp = check_module('dpdata')

    dir_lammpstrj = os.path.join(dir_target)
    try:
        frames = dp.LabeledSystem(file_name=os.path.join(dir_init, 'cp'), fmt='qe/cp/traj')
    except FileExistsError as e:
        import sys 
        sys.exit(e)
    else:
        with open(os.path.join(dir_lammpstrj, 'cp.lammpstrj'), 'w') as file_lammpstrj:
            num_atoms = sum(frames["atom_numbs"])
            for frame in frames:
                file_lammpstrj.write("ITEM: TIMESTEP\n" +
                                    "10\n" +
                                    "ITEM: NUMBER OF ATOMS\n" + 
                                    str(num_atoms) + "\n" +
                                    "ITEM: BOX BOUNDS pp pp pp\n")
                for i in range(3):
                    file_lammpstrj.write("%.14f %.14f\n" %(0.0, frame["cells"][0, i, i]))
                file_lammpstrj.write("ITEM: ATOMS id type x y z\n")
                for id_atoms in range(0, num_atoms):
                    file_lammpstrj.write("%d %d %.8f %.8f %.8f\n"
                        %(id_atoms+1, frame["atom_types"][id_atoms]+1, 
                        frame["coords"][0, id_atoms, 0], 
                        frame["coords"][0, id_atoms, 1],
                        frame["coords"][0, id_atoms, 2]))

        print("The LAMMPStrj file has generated at %s" % dir_lammpstrj)

def lammpstrj2xyz(**kwargs):
    '''
    通用函数，用于将lammpstrj格式文件转换为xyz格式文件。

    dir_init：初始目录路径
    dir_target：目标目录路径
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")
    param = kwargs.get("Arch.lib").get("operator").get("formats").get("lammpstrj2xyz")
    names = param.get("names", ['O', 'H'])

    mda = check_module('MDAnalysis')
    os = check_module('os')

    u = mda.Universe(os.path.join(dir_init, 'traj.lammpstrj'), format='LAMMPSDUMP')
    u.add_TopologyAttr('name')

    for index, name in enumerate(names):
        atoms = u.select_atoms("type " + str(index+1))
        atoms.names = name
    atoms = u.select_atoms("name " + names[0])

    for name in names[1:]:
        atoms += u.select_atoms("name "+name)
        for frame in u.trajectory[-1]:    
            with open(os.path.join(dir_target, 'relax.xyz'), 'w') as file_xyz:
                file_xyz.write(str(atoms.n_atoms)+"\n")
                file_xyz.write("frame 0\n")
                for atom in atoms:
                    file_xyz.write(atom.name + '\t%14.8f\t%14.8f\t%14.8f\n' 
                                % (atom.position[0], atom.position[1], atom.position[2]))

    print("The XYZ file has generated at %s" % dir_target)

def lammpstrj2lammpstrj(**kwargs):
    '''
    通用函数，用于将lammpstrj格式文件中的type改为name。

    dir_init：初始目录路径
    dir_target：目标目录路径
    '''
    dir_init = kwargs.get("dir_init", "")
    dir_target = kwargs.get("dir_target", "")
    param = kwargs.get("Arch.lib").get("operator").get("formats").get("lammpstrj2lammpstrj")
    mapping = param.get("mapping", [["1", "2"], ["O", "H"]])
    filename = param.get("filename", "traj.lammpstrj")
    os = check_module('os')
    re = check_module('re')

    replacement = dict(zip(mapping[0], mapping[1]))
    with open(os.path.join(dir_init, filename), 'r') as file_lammpstrj:
        content = file_lammpstrj.read()

    pattern =  r'(\d+)( \D*\d+\.\d+ \D*\d+\.\d+ \D*\d+\.\d+\n)'
    #print(re.search(pattern, content, re.M).group(1))
    content = re.sub(pattern, lambda x: replacement[x.group(1)]+x.group(2), content, re.S)

    with open(os.path.join(dir_target, 'traj.lammpstrj'), 'w') as file_lammpstrj:
        file_lammpstrj.write(content)
    print("The LAMMPStrj file has generated at %s" % dir_target)    